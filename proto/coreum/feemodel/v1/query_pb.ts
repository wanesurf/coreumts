// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file coreum/feemodel/v1/query.proto (package coreum.feemodel.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { DecCoin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { Params } from "./params_pb.js";

/**
 * QueryMinGasPriceRequest is the request type for the Query/MinGasPrice RPC method.
 *
 * @generated from message coreum.feemodel.v1.QueryMinGasPriceRequest
 */
export class QueryMinGasPriceRequest extends Message<QueryMinGasPriceRequest> {
  constructor(data?: PartialMessage<QueryMinGasPriceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.feemodel.v1.QueryMinGasPriceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryMinGasPriceRequest {
    return new QueryMinGasPriceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryMinGasPriceRequest {
    return new QueryMinGasPriceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryMinGasPriceRequest {
    return new QueryMinGasPriceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryMinGasPriceRequest | PlainMessage<QueryMinGasPriceRequest> | undefined, b: QueryMinGasPriceRequest | PlainMessage<QueryMinGasPriceRequest> | undefined): boolean {
    return proto3.util.equals(QueryMinGasPriceRequest, a, b);
  }
}

/**
 * QueryMinGasPriceResponse is the response type for the Query/MinGasPrice RPC method.
 *
 * @generated from message coreum.feemodel.v1.QueryMinGasPriceResponse
 */
export class QueryMinGasPriceResponse extends Message<QueryMinGasPriceResponse> {
  /**
   * min_gas_price is the current minimum gas price required by the network.
   *
   * @generated from field: cosmos.base.v1beta1.DecCoin min_gas_price = 1;
   */
  minGasPrice?: DecCoin;

  constructor(data?: PartialMessage<QueryMinGasPriceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.feemodel.v1.QueryMinGasPriceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "min_gas_price", kind: "message", T: DecCoin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryMinGasPriceResponse {
    return new QueryMinGasPriceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryMinGasPriceResponse {
    return new QueryMinGasPriceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryMinGasPriceResponse {
    return new QueryMinGasPriceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryMinGasPriceResponse | PlainMessage<QueryMinGasPriceResponse> | undefined, b: QueryMinGasPriceResponse | PlainMessage<QueryMinGasPriceResponse> | undefined): boolean {
    return proto3.util.equals(QueryMinGasPriceResponse, a, b);
  }
}

/**
 * @generated from message coreum.feemodel.v1.QueryRecommendedGasPriceRequest
 */
export class QueryRecommendedGasPriceRequest extends Message<QueryRecommendedGasPriceRequest> {
  /**
   * @generated from field: uint32 after_blocks = 1;
   */
  afterBlocks = 0;

  constructor(data?: PartialMessage<QueryRecommendedGasPriceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.feemodel.v1.QueryRecommendedGasPriceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "after_blocks", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRecommendedGasPriceRequest {
    return new QueryRecommendedGasPriceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRecommendedGasPriceRequest {
    return new QueryRecommendedGasPriceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRecommendedGasPriceRequest {
    return new QueryRecommendedGasPriceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRecommendedGasPriceRequest | PlainMessage<QueryRecommendedGasPriceRequest> | undefined, b: QueryRecommendedGasPriceRequest | PlainMessage<QueryRecommendedGasPriceRequest> | undefined): boolean {
    return proto3.util.equals(QueryRecommendedGasPriceRequest, a, b);
  }
}

/**
 * @generated from message coreum.feemodel.v1.QueryRecommendedGasPriceResponse
 */
export class QueryRecommendedGasPriceResponse extends Message<QueryRecommendedGasPriceResponse> {
  /**
   * @generated from field: cosmos.base.v1beta1.DecCoin low = 1;
   */
  low?: DecCoin;

  /**
   * @generated from field: cosmos.base.v1beta1.DecCoin med = 2;
   */
  med?: DecCoin;

  /**
   * @generated from field: cosmos.base.v1beta1.DecCoin high = 3;
   */
  high?: DecCoin;

  constructor(data?: PartialMessage<QueryRecommendedGasPriceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.feemodel.v1.QueryRecommendedGasPriceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "low", kind: "message", T: DecCoin },
    { no: 2, name: "med", kind: "message", T: DecCoin },
    { no: 3, name: "high", kind: "message", T: DecCoin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRecommendedGasPriceResponse {
    return new QueryRecommendedGasPriceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRecommendedGasPriceResponse {
    return new QueryRecommendedGasPriceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRecommendedGasPriceResponse {
    return new QueryRecommendedGasPriceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRecommendedGasPriceResponse | PlainMessage<QueryRecommendedGasPriceResponse> | undefined, b: QueryRecommendedGasPriceResponse | PlainMessage<QueryRecommendedGasPriceResponse> | undefined): boolean {
    return proto3.util.equals(QueryRecommendedGasPriceResponse, a, b);
  }
}

/**
 * QueryParamsRequest defines the request type for querying x/feemodel parameters.
 *
 * @generated from message coreum.feemodel.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.feemodel.v1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse defines the response type for querying x/feemodel parameters.
 *
 * @generated from message coreum.feemodel.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * @generated from field: coreum.feemodel.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.feemodel.v1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

