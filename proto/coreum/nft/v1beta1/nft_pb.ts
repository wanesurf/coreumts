// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file coreum/nft/v1beta1/nft.proto (package coreum.nft.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";

/**
 * Class defines the class of the nft type.
 *
 * @generated from message coreum.nft.v1beta1.Class
 */
export class Class extends Message<Class> {
  /**
   * id defines the unique identifier of the NFT classification, similar to the contract address of ERC721
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * name defines the human-readable name of the NFT classification. Optional
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * symbol is an abbreviated name for nft classification. Optional
   *
   * @generated from field: string symbol = 3;
   */
  symbol = "";

  /**
   * description is a brief description of nft classification. Optional
   *
   * @generated from field: string description = 4;
   */
  description = "";

  /**
   * uri for the class metadata stored off chain. It can define schema for Class and NFT `Data` attributes. Optional
   *
   * @generated from field: string uri = 5;
   */
  uri = "";

  /**
   * uri_hash is a hash of the document pointed by uri. Optional
   *
   * @generated from field: string uri_hash = 6;
   */
  uriHash = "";

  /**
   * data is the app specific metadata of the NFT class. Optional
   *
   * @generated from field: google.protobuf.Any data = 7;
   */
  data?: Any;

  constructor(data?: PartialMessage<Class>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.nft.v1beta1.Class";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "uri_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "data", kind: "message", T: Any },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Class {
    return new Class().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Class {
    return new Class().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Class {
    return new Class().fromJsonString(jsonString, options);
  }

  static equals(a: Class | PlainMessage<Class> | undefined, b: Class | PlainMessage<Class> | undefined): boolean {
    return proto3.util.equals(Class, a, b);
  }
}

/**
 * NFT defines the NFT.
 *
 * @generated from message coreum.nft.v1beta1.NFT
 */
export class NFT extends Message<NFT> {
  /**
   * class_id associated with the NFT, similar to the contract address of ERC721
   *
   * @generated from field: string class_id = 1;
   */
  classId = "";

  /**
   * id is a unique identifier of the NFT
   *
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * uri for the NFT metadata stored off chain
   *
   * @generated from field: string uri = 3;
   */
  uri = "";

  /**
   * uri_hash is a hash of the document pointed by uri
   *
   * @generated from field: string uri_hash = 4;
   */
  uriHash = "";

  /**
   * data is an app specific data of the NFT. Optional
   *
   * @generated from field: google.protobuf.Any data = 10;
   */
  data?: Any;

  constructor(data?: PartialMessage<NFT>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.nft.v1beta1.NFT";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "uri_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "data", kind: "message", T: Any },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NFT {
    return new NFT().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NFT {
    return new NFT().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NFT {
    return new NFT().fromJsonString(jsonString, options);
  }

  static equals(a: NFT | PlainMessage<NFT> | undefined, b: NFT | PlainMessage<NFT> | undefined): boolean {
    return proto3.util.equals(NFT, a, b);
  }
}

