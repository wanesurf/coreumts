// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file coreum/customparams/v1/params.proto (package coreum.customparams.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * StakingParams defines the set of additional staking params for the staking module wrapper.
 *
 * @generated from message coreum.customparams.v1.StakingParams
 */
export class StakingParams extends Message<StakingParams> {
  /**
   * min_self_delegation is the validators global self declared minimum for delegation.
   *
   * @generated from field: string min_self_delegation = 1;
   */
  minSelfDelegation = "";

  constructor(data?: PartialMessage<StakingParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.customparams.v1.StakingParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "min_self_delegation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StakingParams {
    return new StakingParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StakingParams {
    return new StakingParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StakingParams {
    return new StakingParams().fromJsonString(jsonString, options);
  }

  static equals(a: StakingParams | PlainMessage<StakingParams> | undefined, b: StakingParams | PlainMessage<StakingParams> | undefined): boolean {
    return proto3.util.equals(StakingParams, a, b);
  }
}

