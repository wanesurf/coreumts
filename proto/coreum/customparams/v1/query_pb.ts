// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file coreum/customparams/v1/query.proto (package coreum.customparams.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { StakingParams } from "./params_pb.js";

/**
 * QueryStakingParamsRequest defines the request type for querying x/customparams staking parameters.
 *
 * @generated from message coreum.customparams.v1.QueryStakingParamsRequest
 */
export class QueryStakingParamsRequest extends Message<QueryStakingParamsRequest> {
  constructor(data?: PartialMessage<QueryStakingParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.customparams.v1.QueryStakingParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryStakingParamsRequest {
    return new QueryStakingParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryStakingParamsRequest {
    return new QueryStakingParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryStakingParamsRequest {
    return new QueryStakingParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryStakingParamsRequest | PlainMessage<QueryStakingParamsRequest> | undefined, b: QueryStakingParamsRequest | PlainMessage<QueryStakingParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryStakingParamsRequest, a, b);
  }
}

/**
 * QueryStakingParamsResponse defines the response type for querying x/customparams staking parameters.
 *
 * @generated from message coreum.customparams.v1.QueryStakingParamsResponse
 */
export class QueryStakingParamsResponse extends Message<QueryStakingParamsResponse> {
  /**
   * @generated from field: coreum.customparams.v1.StakingParams params = 1;
   */
  params?: StakingParams;

  constructor(data?: PartialMessage<QueryStakingParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.customparams.v1.QueryStakingParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: StakingParams },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryStakingParamsResponse {
    return new QueryStakingParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryStakingParamsResponse {
    return new QueryStakingParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryStakingParamsResponse {
    return new QueryStakingParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryStakingParamsResponse | PlainMessage<QueryStakingParamsResponse> | undefined, b: QueryStakingParamsResponse | PlainMessage<QueryStakingParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryStakingParamsResponse, a, b);
  }
}

