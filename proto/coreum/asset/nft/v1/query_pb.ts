// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file coreum/asset/nft/v1/query.proto (package coreum.asset.nft.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { Class } from "./nft_pb.js";
import { PageRequest, PageResponse } from "../../../../cosmos/base/query/v1beta1/pagination_pb.js";

/**
 * QueryParamsRequest defines the request type for querying x/asset/nft parameters.
 *
 * @generated from message coreum.asset.nft.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse defines the response type for querying x/asset/nft parameters.
 *
 * @generated from message coreum.asset.nft.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * @generated from field: coreum.asset.nft.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * QueryTokenRequest is request type for the Query/Class RPC method.
 *
 * @generated from message coreum.asset.nft.v1.QueryClassRequest
 */
export class QueryClassRequest extends Message<QueryClassRequest> {
  /**
   * we don't use the gogoproto.customname here since the google.api.http ignores it and generates invalid code.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<QueryClassRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.QueryClassRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryClassRequest {
    return new QueryClassRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryClassRequest {
    return new QueryClassRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryClassRequest {
    return new QueryClassRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryClassRequest | PlainMessage<QueryClassRequest> | undefined, b: QueryClassRequest | PlainMessage<QueryClassRequest> | undefined): boolean {
    return proto3.util.equals(QueryClassRequest, a, b);
  }
}

/**
 * QueryClassResponse is response type for the Query/Class RPC method.
 *
 * @generated from message coreum.asset.nft.v1.QueryClassResponse
 */
export class QueryClassResponse extends Message<QueryClassResponse> {
  /**
   * @generated from field: coreum.asset.nft.v1.Class class = 1;
   */
  class?: Class;

  constructor(data?: PartialMessage<QueryClassResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.QueryClassResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "class", kind: "message", T: Class },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryClassResponse {
    return new QueryClassResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryClassResponse {
    return new QueryClassResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryClassResponse {
    return new QueryClassResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryClassResponse | PlainMessage<QueryClassResponse> | undefined, b: QueryClassResponse | PlainMessage<QueryClassResponse> | undefined): boolean {
    return proto3.util.equals(QueryClassResponse, a, b);
  }
}

/**
 * QueryTokenRequest is request type for the Query/Classes RPC method.
 *
 * @generated from message coreum.asset.nft.v1.QueryClassesRequest
 */
export class QueryClassesRequest extends Message<QueryClassesRequest> {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  /**
   * @generated from field: string issuer = 2;
   */
  issuer = "";

  constructor(data?: PartialMessage<QueryClassesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.QueryClassesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
    { no: 2, name: "issuer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryClassesRequest {
    return new QueryClassesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryClassesRequest {
    return new QueryClassesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryClassesRequest {
    return new QueryClassesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryClassesRequest | PlainMessage<QueryClassesRequest> | undefined, b: QueryClassesRequest | PlainMessage<QueryClassesRequest> | undefined): boolean {
    return proto3.util.equals(QueryClassesRequest, a, b);
  }
}

/**
 * QueryClassResponse is response type for the Query/Classes RPC method.
 *
 * @generated from message coreum.asset.nft.v1.QueryClassesResponse
 */
export class QueryClassesResponse extends Message<QueryClassesResponse> {
  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 1;
   */
  pagination?: PageResponse;

  /**
   * @generated from field: repeated coreum.asset.nft.v1.Class classes = 2;
   */
  classes: Class[] = [];

  constructor(data?: PartialMessage<QueryClassesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.QueryClassesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageResponse },
    { no: 2, name: "classes", kind: "message", T: Class, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryClassesResponse {
    return new QueryClassesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryClassesResponse {
    return new QueryClassesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryClassesResponse {
    return new QueryClassesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryClassesResponse | PlainMessage<QueryClassesResponse> | undefined, b: QueryClassesResponse | PlainMessage<QueryClassesResponse> | undefined): boolean {
    return proto3.util.equals(QueryClassesResponse, a, b);
  }
}

/**
 * @generated from message coreum.asset.nft.v1.QueryFrozenRequest
 */
export class QueryFrozenRequest extends Message<QueryFrozenRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string class_id = 2;
   */
  classId = "";

  constructor(data?: PartialMessage<QueryFrozenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.QueryFrozenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFrozenRequest {
    return new QueryFrozenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFrozenRequest {
    return new QueryFrozenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFrozenRequest {
    return new QueryFrozenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFrozenRequest | PlainMessage<QueryFrozenRequest> | undefined, b: QueryFrozenRequest | PlainMessage<QueryFrozenRequest> | undefined): boolean {
    return proto3.util.equals(QueryFrozenRequest, a, b);
  }
}

/**
 * @generated from message coreum.asset.nft.v1.QueryFrozenResponse
 */
export class QueryFrozenResponse extends Message<QueryFrozenResponse> {
  /**
   * @generated from field: bool frozen = 1;
   */
  frozen = false;

  constructor(data?: PartialMessage<QueryFrozenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.QueryFrozenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "frozen", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFrozenResponse {
    return new QueryFrozenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFrozenResponse {
    return new QueryFrozenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFrozenResponse {
    return new QueryFrozenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFrozenResponse | PlainMessage<QueryFrozenResponse> | undefined, b: QueryFrozenResponse | PlainMessage<QueryFrozenResponse> | undefined): boolean {
    return proto3.util.equals(QueryFrozenResponse, a, b);
  }
}

/**
 * @generated from message coreum.asset.nft.v1.QueryClassFrozenRequest
 */
export class QueryClassFrozenRequest extends Message<QueryClassFrozenRequest> {
  /**
   * @generated from field: string class_id = 1;
   */
  classId = "";

  /**
   * @generated from field: string account = 2;
   */
  account = "";

  constructor(data?: PartialMessage<QueryClassFrozenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.QueryClassFrozenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryClassFrozenRequest {
    return new QueryClassFrozenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryClassFrozenRequest {
    return new QueryClassFrozenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryClassFrozenRequest {
    return new QueryClassFrozenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryClassFrozenRequest | PlainMessage<QueryClassFrozenRequest> | undefined, b: QueryClassFrozenRequest | PlainMessage<QueryClassFrozenRequest> | undefined): boolean {
    return proto3.util.equals(QueryClassFrozenRequest, a, b);
  }
}

/**
 * @generated from message coreum.asset.nft.v1.QueryClassFrozenResponse
 */
export class QueryClassFrozenResponse extends Message<QueryClassFrozenResponse> {
  /**
   * @generated from field: bool frozen = 1;
   */
  frozen = false;

  constructor(data?: PartialMessage<QueryClassFrozenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.QueryClassFrozenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "frozen", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryClassFrozenResponse {
    return new QueryClassFrozenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryClassFrozenResponse {
    return new QueryClassFrozenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryClassFrozenResponse {
    return new QueryClassFrozenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryClassFrozenResponse | PlainMessage<QueryClassFrozenResponse> | undefined, b: QueryClassFrozenResponse | PlainMessage<QueryClassFrozenResponse> | undefined): boolean {
    return proto3.util.equals(QueryClassFrozenResponse, a, b);
  }
}

/**
 * @generated from message coreum.asset.nft.v1.QueryWhitelistedRequest
 */
export class QueryWhitelistedRequest extends Message<QueryWhitelistedRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string class_id = 2;
   */
  classId = "";

  /**
   * @generated from field: string account = 3;
   */
  account = "";

  constructor(data?: PartialMessage<QueryWhitelistedRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.QueryWhitelistedRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryWhitelistedRequest {
    return new QueryWhitelistedRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryWhitelistedRequest {
    return new QueryWhitelistedRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryWhitelistedRequest {
    return new QueryWhitelistedRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryWhitelistedRequest | PlainMessage<QueryWhitelistedRequest> | undefined, b: QueryWhitelistedRequest | PlainMessage<QueryWhitelistedRequest> | undefined): boolean {
    return proto3.util.equals(QueryWhitelistedRequest, a, b);
  }
}

/**
 * @generated from message coreum.asset.nft.v1.QueryWhitelistedResponse
 */
export class QueryWhitelistedResponse extends Message<QueryWhitelistedResponse> {
  /**
   * @generated from field: bool whitelisted = 1;
   */
  whitelisted = false;

  constructor(data?: PartialMessage<QueryWhitelistedResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.QueryWhitelistedResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "whitelisted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryWhitelistedResponse {
    return new QueryWhitelistedResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryWhitelistedResponse {
    return new QueryWhitelistedResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryWhitelistedResponse {
    return new QueryWhitelistedResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryWhitelistedResponse | PlainMessage<QueryWhitelistedResponse> | undefined, b: QueryWhitelistedResponse | PlainMessage<QueryWhitelistedResponse> | undefined): boolean {
    return proto3.util.equals(QueryWhitelistedResponse, a, b);
  }
}

/**
 * @generated from message coreum.asset.nft.v1.QueryWhitelistedAccountsForNFTRequest
 */
export class QueryWhitelistedAccountsForNFTRequest extends Message<QueryWhitelistedAccountsForNFTRequest> {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * @generated from field: string class_id = 3;
   */
  classId = "";

  constructor(data?: PartialMessage<QueryWhitelistedAccountsForNFTRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.QueryWhitelistedAccountsForNFTRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryWhitelistedAccountsForNFTRequest {
    return new QueryWhitelistedAccountsForNFTRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryWhitelistedAccountsForNFTRequest {
    return new QueryWhitelistedAccountsForNFTRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryWhitelistedAccountsForNFTRequest {
    return new QueryWhitelistedAccountsForNFTRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryWhitelistedAccountsForNFTRequest | PlainMessage<QueryWhitelistedAccountsForNFTRequest> | undefined, b: QueryWhitelistedAccountsForNFTRequest | PlainMessage<QueryWhitelistedAccountsForNFTRequest> | undefined): boolean {
    return proto3.util.equals(QueryWhitelistedAccountsForNFTRequest, a, b);
  }
}

/**
 * @generated from message coreum.asset.nft.v1.QueryWhitelistedAccountsForNFTResponse
 */
export class QueryWhitelistedAccountsForNFTResponse extends Message<QueryWhitelistedAccountsForNFTResponse> {
  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 1;
   */
  pagination?: PageResponse;

  /**
   * @generated from field: repeated string accounts = 2;
   */
  accounts: string[] = [];

  constructor(data?: PartialMessage<QueryWhitelistedAccountsForNFTResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.QueryWhitelistedAccountsForNFTResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageResponse },
    { no: 2, name: "accounts", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryWhitelistedAccountsForNFTResponse {
    return new QueryWhitelistedAccountsForNFTResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryWhitelistedAccountsForNFTResponse {
    return new QueryWhitelistedAccountsForNFTResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryWhitelistedAccountsForNFTResponse {
    return new QueryWhitelistedAccountsForNFTResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryWhitelistedAccountsForNFTResponse | PlainMessage<QueryWhitelistedAccountsForNFTResponse> | undefined, b: QueryWhitelistedAccountsForNFTResponse | PlainMessage<QueryWhitelistedAccountsForNFTResponse> | undefined): boolean {
    return proto3.util.equals(QueryWhitelistedAccountsForNFTResponse, a, b);
  }
}

/**
 * @generated from message coreum.asset.nft.v1.QueryClassWhitelistedAccountsRequest
 */
export class QueryClassWhitelistedAccountsRequest extends Message<QueryClassWhitelistedAccountsRequest> {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  /**
   * @generated from field: string class_id = 2;
   */
  classId = "";

  constructor(data?: PartialMessage<QueryClassWhitelistedAccountsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.QueryClassWhitelistedAccountsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
    { no: 2, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryClassWhitelistedAccountsRequest {
    return new QueryClassWhitelistedAccountsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryClassWhitelistedAccountsRequest {
    return new QueryClassWhitelistedAccountsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryClassWhitelistedAccountsRequest {
    return new QueryClassWhitelistedAccountsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryClassWhitelistedAccountsRequest | PlainMessage<QueryClassWhitelistedAccountsRequest> | undefined, b: QueryClassWhitelistedAccountsRequest | PlainMessage<QueryClassWhitelistedAccountsRequest> | undefined): boolean {
    return proto3.util.equals(QueryClassWhitelistedAccountsRequest, a, b);
  }
}

/**
 * @generated from message coreum.asset.nft.v1.QueryClassWhitelistedAccountsResponse
 */
export class QueryClassWhitelistedAccountsResponse extends Message<QueryClassWhitelistedAccountsResponse> {
  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 1;
   */
  pagination?: PageResponse;

  /**
   * @generated from field: repeated string accounts = 2;
   */
  accounts: string[] = [];

  constructor(data?: PartialMessage<QueryClassWhitelistedAccountsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.QueryClassWhitelistedAccountsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageResponse },
    { no: 2, name: "accounts", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryClassWhitelistedAccountsResponse {
    return new QueryClassWhitelistedAccountsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryClassWhitelistedAccountsResponse {
    return new QueryClassWhitelistedAccountsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryClassWhitelistedAccountsResponse {
    return new QueryClassWhitelistedAccountsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryClassWhitelistedAccountsResponse | PlainMessage<QueryClassWhitelistedAccountsResponse> | undefined, b: QueryClassWhitelistedAccountsResponse | PlainMessage<QueryClassWhitelistedAccountsResponse> | undefined): boolean {
    return proto3.util.equals(QueryClassWhitelistedAccountsResponse, a, b);
  }
}

/**
 * @generated from message coreum.asset.nft.v1.QueryClassFrozenAccountsRequest
 */
export class QueryClassFrozenAccountsRequest extends Message<QueryClassFrozenAccountsRequest> {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  /**
   * @generated from field: string class_id = 2;
   */
  classId = "";

  constructor(data?: PartialMessage<QueryClassFrozenAccountsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.QueryClassFrozenAccountsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
    { no: 2, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryClassFrozenAccountsRequest {
    return new QueryClassFrozenAccountsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryClassFrozenAccountsRequest {
    return new QueryClassFrozenAccountsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryClassFrozenAccountsRequest {
    return new QueryClassFrozenAccountsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryClassFrozenAccountsRequest | PlainMessage<QueryClassFrozenAccountsRequest> | undefined, b: QueryClassFrozenAccountsRequest | PlainMessage<QueryClassFrozenAccountsRequest> | undefined): boolean {
    return proto3.util.equals(QueryClassFrozenAccountsRequest, a, b);
  }
}

/**
 * @generated from message coreum.asset.nft.v1.QueryClassFrozenAccountsResponse
 */
export class QueryClassFrozenAccountsResponse extends Message<QueryClassFrozenAccountsResponse> {
  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 1;
   */
  pagination?: PageResponse;

  /**
   * @generated from field: repeated string accounts = 2;
   */
  accounts: string[] = [];

  constructor(data?: PartialMessage<QueryClassFrozenAccountsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.QueryClassFrozenAccountsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageResponse },
    { no: 2, name: "accounts", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryClassFrozenAccountsResponse {
    return new QueryClassFrozenAccountsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryClassFrozenAccountsResponse {
    return new QueryClassFrozenAccountsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryClassFrozenAccountsResponse {
    return new QueryClassFrozenAccountsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryClassFrozenAccountsResponse | PlainMessage<QueryClassFrozenAccountsResponse> | undefined, b: QueryClassFrozenAccountsResponse | PlainMessage<QueryClassFrozenAccountsResponse> | undefined): boolean {
    return proto3.util.equals(QueryClassFrozenAccountsResponse, a, b);
  }
}

/**
 * @generated from message coreum.asset.nft.v1.QueryBurntNFTRequest
 */
export class QueryBurntNFTRequest extends Message<QueryBurntNFTRequest> {
  /**
   * @generated from field: string class_id = 1;
   */
  classId = "";

  /**
   * @generated from field: string nft_id = 2;
   */
  nftId = "";

  constructor(data?: PartialMessage<QueryBurntNFTRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.QueryBurntNFTRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "nft_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBurntNFTRequest {
    return new QueryBurntNFTRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBurntNFTRequest {
    return new QueryBurntNFTRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBurntNFTRequest {
    return new QueryBurntNFTRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBurntNFTRequest | PlainMessage<QueryBurntNFTRequest> | undefined, b: QueryBurntNFTRequest | PlainMessage<QueryBurntNFTRequest> | undefined): boolean {
    return proto3.util.equals(QueryBurntNFTRequest, a, b);
  }
}

/**
 * @generated from message coreum.asset.nft.v1.QueryBurntNFTResponse
 */
export class QueryBurntNFTResponse extends Message<QueryBurntNFTResponse> {
  /**
   * @generated from field: bool burnt = 1;
   */
  burnt = false;

  constructor(data?: PartialMessage<QueryBurntNFTResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.QueryBurntNFTResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "burnt", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBurntNFTResponse {
    return new QueryBurntNFTResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBurntNFTResponse {
    return new QueryBurntNFTResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBurntNFTResponse {
    return new QueryBurntNFTResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBurntNFTResponse | PlainMessage<QueryBurntNFTResponse> | undefined, b: QueryBurntNFTResponse | PlainMessage<QueryBurntNFTResponse> | undefined): boolean {
    return proto3.util.equals(QueryBurntNFTResponse, a, b);
  }
}

/**
 * @generated from message coreum.asset.nft.v1.QueryBurntNFTsInClassRequest
 */
export class QueryBurntNFTsInClassRequest extends Message<QueryBurntNFTsInClassRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  /**
   * @generated from field: string class_id = 2;
   */
  classId = "";

  constructor(data?: PartialMessage<QueryBurntNFTsInClassRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.QueryBurntNFTsInClassRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
    { no: 2, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBurntNFTsInClassRequest {
    return new QueryBurntNFTsInClassRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBurntNFTsInClassRequest {
    return new QueryBurntNFTsInClassRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBurntNFTsInClassRequest {
    return new QueryBurntNFTsInClassRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBurntNFTsInClassRequest | PlainMessage<QueryBurntNFTsInClassRequest> | undefined, b: QueryBurntNFTsInClassRequest | PlainMessage<QueryBurntNFTsInClassRequest> | undefined): boolean {
    return proto3.util.equals(QueryBurntNFTsInClassRequest, a, b);
  }
}

/**
 * @generated from message coreum.asset.nft.v1.QueryBurntNFTsInClassResponse
 */
export class QueryBurntNFTsInClassResponse extends Message<QueryBurntNFTsInClassResponse> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 1;
   */
  pagination?: PageResponse;

  /**
   * @generated from field: repeated string nft_ids = 2;
   */
  nftIds: string[] = [];

  constructor(data?: PartialMessage<QueryBurntNFTsInClassResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.QueryBurntNFTsInClassResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageResponse },
    { no: 2, name: "nft_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBurntNFTsInClassResponse {
    return new QueryBurntNFTsInClassResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBurntNFTsInClassResponse {
    return new QueryBurntNFTsInClassResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBurntNFTsInClassResponse {
    return new QueryBurntNFTsInClassResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBurntNFTsInClassResponse | PlainMessage<QueryBurntNFTsInClassResponse> | undefined, b: QueryBurntNFTsInClassResponse | PlainMessage<QueryBurntNFTsInClassResponse> | undefined): boolean {
    return proto3.util.equals(QueryBurntNFTsInClassResponse, a, b);
  }
}

