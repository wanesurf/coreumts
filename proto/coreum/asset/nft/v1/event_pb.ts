// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file coreum/asset/nft/v1/event.proto (package coreum.asset.nft.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ClassFeature } from "./nft_pb.js";

/**
 * EventClassIssued is emitted on MsgIssueClass.
 *
 * @generated from message coreum.asset.nft.v1.EventClassIssued
 */
export class EventClassIssued extends Message<EventClassIssued> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string issuer = 2;
   */
  issuer = "";

  /**
   * @generated from field: string symbol = 3;
   */
  symbol = "";

  /**
   * @generated from field: string name = 4;
   */
  name = "";

  /**
   * @generated from field: string description = 5;
   */
  description = "";

  /**
   * @generated from field: string uri = 6;
   */
  uri = "";

  /**
   * @generated from field: string uri_hash = 7;
   */
  uriHash = "";

  /**
   * @generated from field: repeated coreum.asset.nft.v1.ClassFeature features = 8;
   */
  features: ClassFeature[] = [];

  /**
   * @generated from field: string royalty_rate = 9;
   */
  royaltyRate = "";

  constructor(data?: PartialMessage<EventClassIssued>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.EventClassIssued";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "issuer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "uri_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "features", kind: "enum", T: proto3.getEnumType(ClassFeature), repeated: true },
    { no: 9, name: "royalty_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventClassIssued {
    return new EventClassIssued().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventClassIssued {
    return new EventClassIssued().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventClassIssued {
    return new EventClassIssued().fromJsonString(jsonString, options);
  }

  static equals(a: EventClassIssued | PlainMessage<EventClassIssued> | undefined, b: EventClassIssued | PlainMessage<EventClassIssued> | undefined): boolean {
    return proto3.util.equals(EventClassIssued, a, b);
  }
}

/**
 * @generated from message coreum.asset.nft.v1.EventFrozen
 */
export class EventFrozen extends Message<EventFrozen> {
  /**
   * @generated from field: string class_id = 1;
   */
  classId = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * @generated from field: string owner = 3;
   */
  owner = "";

  constructor(data?: PartialMessage<EventFrozen>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.EventFrozen";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventFrozen {
    return new EventFrozen().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventFrozen {
    return new EventFrozen().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventFrozen {
    return new EventFrozen().fromJsonString(jsonString, options);
  }

  static equals(a: EventFrozen | PlainMessage<EventFrozen> | undefined, b: EventFrozen | PlainMessage<EventFrozen> | undefined): boolean {
    return proto3.util.equals(EventFrozen, a, b);
  }
}

/**
 * @generated from message coreum.asset.nft.v1.EventUnfrozen
 */
export class EventUnfrozen extends Message<EventUnfrozen> {
  /**
   * @generated from field: string class_id = 1;
   */
  classId = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * @generated from field: string owner = 3;
   */
  owner = "";

  constructor(data?: PartialMessage<EventUnfrozen>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.EventUnfrozen";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventUnfrozen {
    return new EventUnfrozen().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventUnfrozen {
    return new EventUnfrozen().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventUnfrozen {
    return new EventUnfrozen().fromJsonString(jsonString, options);
  }

  static equals(a: EventUnfrozen | PlainMessage<EventUnfrozen> | undefined, b: EventUnfrozen | PlainMessage<EventUnfrozen> | undefined): boolean {
    return proto3.util.equals(EventUnfrozen, a, b);
  }
}

/**
 * @generated from message coreum.asset.nft.v1.EventClassFrozen
 */
export class EventClassFrozen extends Message<EventClassFrozen> {
  /**
   * @generated from field: string class_id = 1;
   */
  classId = "";

  /**
   * @generated from field: string account = 3;
   */
  account = "";

  constructor(data?: PartialMessage<EventClassFrozen>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.EventClassFrozen";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventClassFrozen {
    return new EventClassFrozen().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventClassFrozen {
    return new EventClassFrozen().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventClassFrozen {
    return new EventClassFrozen().fromJsonString(jsonString, options);
  }

  static equals(a: EventClassFrozen | PlainMessage<EventClassFrozen> | undefined, b: EventClassFrozen | PlainMessage<EventClassFrozen> | undefined): boolean {
    return proto3.util.equals(EventClassFrozen, a, b);
  }
}

/**
 * @generated from message coreum.asset.nft.v1.EventClassUnfrozen
 */
export class EventClassUnfrozen extends Message<EventClassUnfrozen> {
  /**
   * @generated from field: string class_id = 1;
   */
  classId = "";

  /**
   * @generated from field: string account = 3;
   */
  account = "";

  constructor(data?: PartialMessage<EventClassUnfrozen>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.EventClassUnfrozen";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventClassUnfrozen {
    return new EventClassUnfrozen().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventClassUnfrozen {
    return new EventClassUnfrozen().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventClassUnfrozen {
    return new EventClassUnfrozen().fromJsonString(jsonString, options);
  }

  static equals(a: EventClassUnfrozen | PlainMessage<EventClassUnfrozen> | undefined, b: EventClassUnfrozen | PlainMessage<EventClassUnfrozen> | undefined): boolean {
    return proto3.util.equals(EventClassUnfrozen, a, b);
  }
}

/**
 * @generated from message coreum.asset.nft.v1.EventAddedToWhitelist
 */
export class EventAddedToWhitelist extends Message<EventAddedToWhitelist> {
  /**
   * @generated from field: string class_id = 1;
   */
  classId = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * @generated from field: string account = 3;
   */
  account = "";

  constructor(data?: PartialMessage<EventAddedToWhitelist>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.EventAddedToWhitelist";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventAddedToWhitelist {
    return new EventAddedToWhitelist().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventAddedToWhitelist {
    return new EventAddedToWhitelist().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventAddedToWhitelist {
    return new EventAddedToWhitelist().fromJsonString(jsonString, options);
  }

  static equals(a: EventAddedToWhitelist | PlainMessage<EventAddedToWhitelist> | undefined, b: EventAddedToWhitelist | PlainMessage<EventAddedToWhitelist> | undefined): boolean {
    return proto3.util.equals(EventAddedToWhitelist, a, b);
  }
}

/**
 * @generated from message coreum.asset.nft.v1.EventRemovedFromWhitelist
 */
export class EventRemovedFromWhitelist extends Message<EventRemovedFromWhitelist> {
  /**
   * @generated from field: string class_id = 1;
   */
  classId = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * @generated from field: string account = 3;
   */
  account = "";

  constructor(data?: PartialMessage<EventRemovedFromWhitelist>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.EventRemovedFromWhitelist";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventRemovedFromWhitelist {
    return new EventRemovedFromWhitelist().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventRemovedFromWhitelist {
    return new EventRemovedFromWhitelist().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventRemovedFromWhitelist {
    return new EventRemovedFromWhitelist().fromJsonString(jsonString, options);
  }

  static equals(a: EventRemovedFromWhitelist | PlainMessage<EventRemovedFromWhitelist> | undefined, b: EventRemovedFromWhitelist | PlainMessage<EventRemovedFromWhitelist> | undefined): boolean {
    return proto3.util.equals(EventRemovedFromWhitelist, a, b);
  }
}

/**
 * @generated from message coreum.asset.nft.v1.EventAddedToClassWhitelist
 */
export class EventAddedToClassWhitelist extends Message<EventAddedToClassWhitelist> {
  /**
   * @generated from field: string class_id = 1;
   */
  classId = "";

  /**
   * @generated from field: string account = 2;
   */
  account = "";

  constructor(data?: PartialMessage<EventAddedToClassWhitelist>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.EventAddedToClassWhitelist";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventAddedToClassWhitelist {
    return new EventAddedToClassWhitelist().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventAddedToClassWhitelist {
    return new EventAddedToClassWhitelist().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventAddedToClassWhitelist {
    return new EventAddedToClassWhitelist().fromJsonString(jsonString, options);
  }

  static equals(a: EventAddedToClassWhitelist | PlainMessage<EventAddedToClassWhitelist> | undefined, b: EventAddedToClassWhitelist | PlainMessage<EventAddedToClassWhitelist> | undefined): boolean {
    return proto3.util.equals(EventAddedToClassWhitelist, a, b);
  }
}

/**
 * @generated from message coreum.asset.nft.v1.EventRemovedFromClassWhitelist
 */
export class EventRemovedFromClassWhitelist extends Message<EventRemovedFromClassWhitelist> {
  /**
   * @generated from field: string class_id = 1;
   */
  classId = "";

  /**
   * @generated from field: string account = 2;
   */
  account = "";

  constructor(data?: PartialMessage<EventRemovedFromClassWhitelist>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.EventRemovedFromClassWhitelist";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventRemovedFromClassWhitelist {
    return new EventRemovedFromClassWhitelist().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventRemovedFromClassWhitelist {
    return new EventRemovedFromClassWhitelist().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventRemovedFromClassWhitelist {
    return new EventRemovedFromClassWhitelist().fromJsonString(jsonString, options);
  }

  static equals(a: EventRemovedFromClassWhitelist | PlainMessage<EventRemovedFromClassWhitelist> | undefined, b: EventRemovedFromClassWhitelist | PlainMessage<EventRemovedFromClassWhitelist> | undefined): boolean {
    return proto3.util.equals(EventRemovedFromClassWhitelist, a, b);
  }
}

