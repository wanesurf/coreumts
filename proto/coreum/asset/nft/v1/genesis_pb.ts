// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file coreum/asset/nft/v1/genesis.proto (package coreum.asset.nft.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { ClassDefinition } from "./nft_pb.js";

/**
 * GenesisState defines the nftasset module's genesis state.
 *
 * @generated from message coreum.asset.nft.v1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * params defines all the parameters of the module.
   *
   * @generated from field: coreum.asset.nft.v1.Params params = 1;
   */
  params?: Params;

  /**
   * class_definitions keep the non-fungible token class definitions state
   *
   * @generated from field: repeated coreum.asset.nft.v1.ClassDefinition class_definitions = 2;
   */
  classDefinitions: ClassDefinition[] = [];

  /**
   * @generated from field: repeated coreum.asset.nft.v1.FrozenNFT frozen_nfts = 3;
   */
  frozenNfts: FrozenNFT[] = [];

  /**
   * @generated from field: repeated coreum.asset.nft.v1.WhitelistedNFTAccounts whitelisted_nft_accounts = 4;
   */
  whitelistedNftAccounts: WhitelistedNFTAccounts[] = [];

  /**
   * @generated from field: repeated coreum.asset.nft.v1.BurntNFT burnt_nfts = 5;
   */
  burntNfts: BurntNFT[] = [];

  /**
   * @generated from field: repeated coreum.asset.nft.v1.ClassWhitelistedAccounts class_whitelisted_accounts = 6;
   */
  classWhitelistedAccounts: ClassWhitelistedAccounts[] = [];

  /**
   * @generated from field: repeated coreum.asset.nft.v1.ClassFrozenAccounts class_frozen_accounts = 7;
   */
  classFrozenAccounts: ClassFrozenAccounts[] = [];

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
    { no: 2, name: "class_definitions", kind: "message", T: ClassDefinition, repeated: true },
    { no: 3, name: "frozen_nfts", kind: "message", T: FrozenNFT, repeated: true },
    { no: 4, name: "whitelisted_nft_accounts", kind: "message", T: WhitelistedNFTAccounts, repeated: true },
    { no: 5, name: "burnt_nfts", kind: "message", T: BurntNFT, repeated: true },
    { no: 6, name: "class_whitelisted_accounts", kind: "message", T: ClassWhitelistedAccounts, repeated: true },
    { no: 7, name: "class_frozen_accounts", kind: "message", T: ClassFrozenAccounts, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

/**
 * @generated from message coreum.asset.nft.v1.FrozenNFT
 */
export class FrozenNFT extends Message<FrozenNFT> {
  /**
   * @generated from field: string classID = 1;
   */
  classID = "";

  /**
   * @generated from field: repeated string nftIDs = 2;
   */
  nftIDs: string[] = [];

  constructor(data?: PartialMessage<FrozenNFT>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.FrozenNFT";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "classID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "nftIDs", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FrozenNFT {
    return new FrozenNFT().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FrozenNFT {
    return new FrozenNFT().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FrozenNFT {
    return new FrozenNFT().fromJsonString(jsonString, options);
  }

  static equals(a: FrozenNFT | PlainMessage<FrozenNFT> | undefined, b: FrozenNFT | PlainMessage<FrozenNFT> | undefined): boolean {
    return proto3.util.equals(FrozenNFT, a, b);
  }
}

/**
 * @generated from message coreum.asset.nft.v1.WhitelistedNFTAccounts
 */
export class WhitelistedNFTAccounts extends Message<WhitelistedNFTAccounts> {
  /**
   * @generated from field: string classID = 1;
   */
  classID = "";

  /**
   * @generated from field: string nftID = 2;
   */
  nftID = "";

  /**
   * @generated from field: repeated string accounts = 4;
   */
  accounts: string[] = [];

  constructor(data?: PartialMessage<WhitelistedNFTAccounts>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.WhitelistedNFTAccounts";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "classID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "nftID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "accounts", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WhitelistedNFTAccounts {
    return new WhitelistedNFTAccounts().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WhitelistedNFTAccounts {
    return new WhitelistedNFTAccounts().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WhitelistedNFTAccounts {
    return new WhitelistedNFTAccounts().fromJsonString(jsonString, options);
  }

  static equals(a: WhitelistedNFTAccounts | PlainMessage<WhitelistedNFTAccounts> | undefined, b: WhitelistedNFTAccounts | PlainMessage<WhitelistedNFTAccounts> | undefined): boolean {
    return proto3.util.equals(WhitelistedNFTAccounts, a, b);
  }
}

/**
 * @generated from message coreum.asset.nft.v1.ClassWhitelistedAccounts
 */
export class ClassWhitelistedAccounts extends Message<ClassWhitelistedAccounts> {
  /**
   * @generated from field: string classID = 1;
   */
  classID = "";

  /**
   * @generated from field: repeated string accounts = 2;
   */
  accounts: string[] = [];

  constructor(data?: PartialMessage<ClassWhitelistedAccounts>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.ClassWhitelistedAccounts";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "classID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "accounts", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClassWhitelistedAccounts {
    return new ClassWhitelistedAccounts().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClassWhitelistedAccounts {
    return new ClassWhitelistedAccounts().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClassWhitelistedAccounts {
    return new ClassWhitelistedAccounts().fromJsonString(jsonString, options);
  }

  static equals(a: ClassWhitelistedAccounts | PlainMessage<ClassWhitelistedAccounts> | undefined, b: ClassWhitelistedAccounts | PlainMessage<ClassWhitelistedAccounts> | undefined): boolean {
    return proto3.util.equals(ClassWhitelistedAccounts, a, b);
  }
}

/**
 * @generated from message coreum.asset.nft.v1.ClassFrozenAccounts
 */
export class ClassFrozenAccounts extends Message<ClassFrozenAccounts> {
  /**
   * @generated from field: string classID = 1;
   */
  classID = "";

  /**
   * @generated from field: repeated string accounts = 2;
   */
  accounts: string[] = [];

  constructor(data?: PartialMessage<ClassFrozenAccounts>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.ClassFrozenAccounts";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "classID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "accounts", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClassFrozenAccounts {
    return new ClassFrozenAccounts().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClassFrozenAccounts {
    return new ClassFrozenAccounts().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClassFrozenAccounts {
    return new ClassFrozenAccounts().fromJsonString(jsonString, options);
  }

  static equals(a: ClassFrozenAccounts | PlainMessage<ClassFrozenAccounts> | undefined, b: ClassFrozenAccounts | PlainMessage<ClassFrozenAccounts> | undefined): boolean {
    return proto3.util.equals(ClassFrozenAccounts, a, b);
  }
}

/**
 * @generated from message coreum.asset.nft.v1.BurntNFT
 */
export class BurntNFT extends Message<BurntNFT> {
  /**
   * @generated from field: string classID = 1;
   */
  classID = "";

  /**
   * @generated from field: repeated string nftIDs = 2;
   */
  nftIDs: string[] = [];

  constructor(data?: PartialMessage<BurntNFT>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.BurntNFT";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "classID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "nftIDs", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BurntNFT {
    return new BurntNFT().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BurntNFT {
    return new BurntNFT().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BurntNFT {
    return new BurntNFT().fromJsonString(jsonString, options);
  }

  static equals(a: BurntNFT | PlainMessage<BurntNFT> | undefined, b: BurntNFT | PlainMessage<BurntNFT> | undefined): boolean {
    return proto3.util.equals(BurntNFT, a, b);
  }
}

