// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file coreum/asset/nft/v1/nft.proto (package coreum.asset.nft.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";

/**
 * ClassFeature defines possible features of non-fungible token class.
 *
 * @generated from enum coreum.asset.nft.v1.ClassFeature
 */
export enum ClassFeature {
  /**
   * @generated from enum value: burning = 0;
   */
  burning = 0,

  /**
   * @generated from enum value: freezing = 1;
   */
  freezing = 1,

  /**
   * @generated from enum value: whitelisting = 2;
   */
  whitelisting = 2,

  /**
   * @generated from enum value: disable_sending = 3;
   */
  disable_sending = 3,

  /**
   * @generated from enum value: soulbound = 4;
   */
  soulbound = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(ClassFeature)
proto3.util.setEnumType(ClassFeature, "coreum.asset.nft.v1.ClassFeature", [
  { no: 0, name: "burning" },
  { no: 1, name: "freezing" },
  { no: 2, name: "whitelisting" },
  { no: 3, name: "disable_sending" },
  { no: 4, name: "soulbound" },
]);

/**
 * ClassDefinition defines the non-fungible token class settings to store.
 *
 * @generated from message coreum.asset.nft.v1.ClassDefinition
 */
export class ClassDefinition extends Message<ClassDefinition> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string issuer = 2;
   */
  issuer = "";

  /**
   * @generated from field: repeated coreum.asset.nft.v1.ClassFeature features = 3;
   */
  features: ClassFeature[] = [];

  /**
   * royalty_rate is a number between 0 and 1,which will be used in coreum native Dex.
   * whenever an NFT this class is traded on the Dex, the traded amount will be multiplied by this value
   * that will be transferred to the issuer of the NFT.
   *
   * @generated from field: string royalty_rate = 4;
   */
  royaltyRate = "";

  constructor(data?: PartialMessage<ClassDefinition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.ClassDefinition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "issuer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "features", kind: "enum", T: proto3.getEnumType(ClassFeature), repeated: true },
    { no: 4, name: "royalty_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClassDefinition {
    return new ClassDefinition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClassDefinition {
    return new ClassDefinition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClassDefinition {
    return new ClassDefinition().fromJsonString(jsonString, options);
  }

  static equals(a: ClassDefinition | PlainMessage<ClassDefinition> | undefined, b: ClassDefinition | PlainMessage<ClassDefinition> | undefined): boolean {
    return proto3.util.equals(ClassDefinition, a, b);
  }
}

/**
 * Class is a full representation of the non-fungible token class.
 *
 * @generated from message coreum.asset.nft.v1.Class
 */
export class Class extends Message<Class> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string issuer = 2;
   */
  issuer = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string symbol = 4;
   */
  symbol = "";

  /**
   * @generated from field: string description = 5;
   */
  description = "";

  /**
   * @generated from field: string uri = 6;
   */
  uri = "";

  /**
   * @generated from field: string uri_hash = 7;
   */
  uriHash = "";

  /**
   * @generated from field: google.protobuf.Any data = 8;
   */
  data?: Any;

  /**
   * @generated from field: repeated coreum.asset.nft.v1.ClassFeature features = 9;
   */
  features: ClassFeature[] = [];

  /**
   * royalty_rate is a number between 0 and 1,which will be used in coreum native Dex.
   * whenever an NFT this class is traded on the Dex, the traded amount will be multiplied by this value
   * that will be transferred to the issuer of the NFT.
   *
   * @generated from field: string royalty_rate = 10;
   */
  royaltyRate = "";

  constructor(data?: PartialMessage<Class>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.Class";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "issuer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "uri_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "data", kind: "message", T: Any },
    { no: 9, name: "features", kind: "enum", T: proto3.getEnumType(ClassFeature), repeated: true },
    { no: 10, name: "royalty_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Class {
    return new Class().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Class {
    return new Class().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Class {
    return new Class().fromJsonString(jsonString, options);
  }

  static equals(a: Class | PlainMessage<Class> | undefined, b: Class | PlainMessage<Class> | undefined): boolean {
    return proto3.util.equals(Class, a, b);
  }
}

