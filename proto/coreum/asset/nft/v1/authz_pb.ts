// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file coreum/asset/nft/v1/authz.proto (package coreum.asset.nft.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * SendAuthorization allows the grantee to send specific NFTs from the granter's account.
 *
 * @generated from message coreum.asset.nft.v1.SendAuthorization
 */
export class SendAuthorization extends Message<SendAuthorization> {
  /**
   * @generated from field: repeated coreum.asset.nft.v1.NFTIdentifier nfts = 1;
   */
  nfts: NFTIdentifier[] = [];

  constructor(data?: PartialMessage<SendAuthorization>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.SendAuthorization";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nfts", kind: "message", T: NFTIdentifier, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendAuthorization {
    return new SendAuthorization().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendAuthorization {
    return new SendAuthorization().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendAuthorization {
    return new SendAuthorization().fromJsonString(jsonString, options);
  }

  static equals(a: SendAuthorization | PlainMessage<SendAuthorization> | undefined, b: SendAuthorization | PlainMessage<SendAuthorization> | undefined): boolean {
    return proto3.util.equals(SendAuthorization, a, b);
  }
}

/**
 * @generated from message coreum.asset.nft.v1.NFTIdentifier
 */
export class NFTIdentifier extends Message<NFTIdentifier> {
  /**
   * class_id defines the unique identifier of the nft classification, similar to the contract address of ERC721
   *
   * @generated from field: string class_id = 1;
   */
  classId = "";

  /**
   * id defines the unique identification of nft
   *
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<NFTIdentifier>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.NFTIdentifier";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NFTIdentifier {
    return new NFTIdentifier().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NFTIdentifier {
    return new NFTIdentifier().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NFTIdentifier {
    return new NFTIdentifier().fromJsonString(jsonString, options);
  }

  static equals(a: NFTIdentifier | PlainMessage<NFTIdentifier> | undefined, b: NFTIdentifier | PlainMessage<NFTIdentifier> | undefined): boolean {
    return proto3.util.equals(NFTIdentifier, a, b);
  }
}

