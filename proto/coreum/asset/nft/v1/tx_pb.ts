// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file coreum/asset/nft/v1/tx.proto (package coreum.asset.nft.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { ClassFeature } from "./nft_pb.js";
import { Params } from "./params_pb.js";

/**
 * MsgIssueClass defines message for the IssueClass method.
 *
 * @generated from message coreum.asset.nft.v1.MsgIssueClass
 */
export class MsgIssueClass extends Message<MsgIssueClass> {
  /**
   * @generated from field: string issuer = 1;
   */
  issuer = "";

  /**
   * @generated from field: string symbol = 2;
   */
  symbol = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string description = 4;
   */
  description = "";

  /**
   * @generated from field: string uri = 5;
   */
  uri = "";

  /**
   * @generated from field: string uri_hash = 6;
   */
  uriHash = "";

  /**
   * @generated from field: google.protobuf.Any data = 7;
   */
  data?: Any;

  /**
   * @generated from field: repeated coreum.asset.nft.v1.ClassFeature features = 8;
   */
  features: ClassFeature[] = [];

  /**
   * @generated from field: string royalty_rate = 9;
   */
  royaltyRate = "";

  constructor(data?: PartialMessage<MsgIssueClass>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.MsgIssueClass";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "issuer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "uri_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "data", kind: "message", T: Any },
    { no: 8, name: "features", kind: "enum", T: proto3.getEnumType(ClassFeature), repeated: true },
    { no: 9, name: "royalty_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgIssueClass {
    return new MsgIssueClass().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgIssueClass {
    return new MsgIssueClass().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgIssueClass {
    return new MsgIssueClass().fromJsonString(jsonString, options);
  }

  static equals(a: MsgIssueClass | PlainMessage<MsgIssueClass> | undefined, b: MsgIssueClass | PlainMessage<MsgIssueClass> | undefined): boolean {
    return proto3.util.equals(MsgIssueClass, a, b);
  }
}

/**
 * MsgMint defines message for the Mint method.
 *
 * @generated from message coreum.asset.nft.v1.MsgMint
 */
export class MsgMint extends Message<MsgMint> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string class_id = 2;
   */
  classId = "";

  /**
   * @generated from field: string id = 3;
   */
  id = "";

  /**
   * @generated from field: string uri = 4;
   */
  uri = "";

  /**
   * @generated from field: string uri_hash = 5;
   */
  uriHash = "";

  /**
   * @generated from field: google.protobuf.Any data = 6;
   */
  data?: Any;

  /**
   * @generated from field: string recipient = 7;
   */
  recipient = "";

  constructor(data?: PartialMessage<MsgMint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.MsgMint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "uri_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "data", kind: "message", T: Any },
    { no: 7, name: "recipient", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgMint {
    return new MsgMint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgMint {
    return new MsgMint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgMint {
    return new MsgMint().fromJsonString(jsonString, options);
  }

  static equals(a: MsgMint | PlainMessage<MsgMint> | undefined, b: MsgMint | PlainMessage<MsgMint> | undefined): boolean {
    return proto3.util.equals(MsgMint, a, b);
  }
}

/**
 * MsgBurn defines message for the Burn method.
 *
 * @generated from message coreum.asset.nft.v1.MsgBurn
 */
export class MsgBurn extends Message<MsgBurn> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string class_id = 2;
   */
  classId = "";

  /**
   * @generated from field: string id = 3;
   */
  id = "";

  constructor(data?: PartialMessage<MsgBurn>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.MsgBurn";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgBurn {
    return new MsgBurn().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgBurn {
    return new MsgBurn().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgBurn {
    return new MsgBurn().fromJsonString(jsonString, options);
  }

  static equals(a: MsgBurn | PlainMessage<MsgBurn> | undefined, b: MsgBurn | PlainMessage<MsgBurn> | undefined): boolean {
    return proto3.util.equals(MsgBurn, a, b);
  }
}

/**
 * @generated from message coreum.asset.nft.v1.MsgFreeze
 */
export class MsgFreeze extends Message<MsgFreeze> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string class_id = 2;
   */
  classId = "";

  /**
   * @generated from field: string id = 3;
   */
  id = "";

  constructor(data?: PartialMessage<MsgFreeze>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.MsgFreeze";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgFreeze {
    return new MsgFreeze().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgFreeze {
    return new MsgFreeze().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgFreeze {
    return new MsgFreeze().fromJsonString(jsonString, options);
  }

  static equals(a: MsgFreeze | PlainMessage<MsgFreeze> | undefined, b: MsgFreeze | PlainMessage<MsgFreeze> | undefined): boolean {
    return proto3.util.equals(MsgFreeze, a, b);
  }
}

/**
 * @generated from message coreum.asset.nft.v1.MsgUnfreeze
 */
export class MsgUnfreeze extends Message<MsgUnfreeze> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string class_id = 2;
   */
  classId = "";

  /**
   * @generated from field: string id = 3;
   */
  id = "";

  constructor(data?: PartialMessage<MsgUnfreeze>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.MsgUnfreeze";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUnfreeze {
    return new MsgUnfreeze().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUnfreeze {
    return new MsgUnfreeze().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUnfreeze {
    return new MsgUnfreeze().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUnfreeze | PlainMessage<MsgUnfreeze> | undefined, b: MsgUnfreeze | PlainMessage<MsgUnfreeze> | undefined): boolean {
    return proto3.util.equals(MsgUnfreeze, a, b);
  }
}

/**
 * @generated from message coreum.asset.nft.v1.MsgClassFreeze
 */
export class MsgClassFreeze extends Message<MsgClassFreeze> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string class_id = 2;
   */
  classId = "";

  /**
   * @generated from field: string account = 3;
   */
  account = "";

  constructor(data?: PartialMessage<MsgClassFreeze>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.MsgClassFreeze";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClassFreeze {
    return new MsgClassFreeze().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClassFreeze {
    return new MsgClassFreeze().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClassFreeze {
    return new MsgClassFreeze().fromJsonString(jsonString, options);
  }

  static equals(a: MsgClassFreeze | PlainMessage<MsgClassFreeze> | undefined, b: MsgClassFreeze | PlainMessage<MsgClassFreeze> | undefined): boolean {
    return proto3.util.equals(MsgClassFreeze, a, b);
  }
}

/**
 * @generated from message coreum.asset.nft.v1.MsgClassUnfreeze
 */
export class MsgClassUnfreeze extends Message<MsgClassUnfreeze> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string class_id = 2;
   */
  classId = "";

  /**
   * @generated from field: string account = 3;
   */
  account = "";

  constructor(data?: PartialMessage<MsgClassUnfreeze>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.MsgClassUnfreeze";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClassUnfreeze {
    return new MsgClassUnfreeze().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClassUnfreeze {
    return new MsgClassUnfreeze().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClassUnfreeze {
    return new MsgClassUnfreeze().fromJsonString(jsonString, options);
  }

  static equals(a: MsgClassUnfreeze | PlainMessage<MsgClassUnfreeze> | undefined, b: MsgClassUnfreeze | PlainMessage<MsgClassUnfreeze> | undefined): boolean {
    return proto3.util.equals(MsgClassUnfreeze, a, b);
  }
}

/**
 * @generated from message coreum.asset.nft.v1.MsgAddToWhitelist
 */
export class MsgAddToWhitelist extends Message<MsgAddToWhitelist> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string class_id = 2;
   */
  classId = "";

  /**
   * @generated from field: string id = 3;
   */
  id = "";

  /**
   * @generated from field: string account = 4;
   */
  account = "";

  constructor(data?: PartialMessage<MsgAddToWhitelist>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.MsgAddToWhitelist";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAddToWhitelist {
    return new MsgAddToWhitelist().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAddToWhitelist {
    return new MsgAddToWhitelist().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAddToWhitelist {
    return new MsgAddToWhitelist().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAddToWhitelist | PlainMessage<MsgAddToWhitelist> | undefined, b: MsgAddToWhitelist | PlainMessage<MsgAddToWhitelist> | undefined): boolean {
    return proto3.util.equals(MsgAddToWhitelist, a, b);
  }
}

/**
 * @generated from message coreum.asset.nft.v1.MsgRemoveFromWhitelist
 */
export class MsgRemoveFromWhitelist extends Message<MsgRemoveFromWhitelist> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string class_id = 2;
   */
  classId = "";

  /**
   * @generated from field: string id = 3;
   */
  id = "";

  /**
   * @generated from field: string account = 4;
   */
  account = "";

  constructor(data?: PartialMessage<MsgRemoveFromWhitelist>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.MsgRemoveFromWhitelist";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRemoveFromWhitelist {
    return new MsgRemoveFromWhitelist().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRemoveFromWhitelist {
    return new MsgRemoveFromWhitelist().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRemoveFromWhitelist {
    return new MsgRemoveFromWhitelist().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRemoveFromWhitelist | PlainMessage<MsgRemoveFromWhitelist> | undefined, b: MsgRemoveFromWhitelist | PlainMessage<MsgRemoveFromWhitelist> | undefined): boolean {
    return proto3.util.equals(MsgRemoveFromWhitelist, a, b);
  }
}

/**
 * @generated from message coreum.asset.nft.v1.MsgAddToClassWhitelist
 */
export class MsgAddToClassWhitelist extends Message<MsgAddToClassWhitelist> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string class_id = 2;
   */
  classId = "";

  /**
   * @generated from field: string account = 3;
   */
  account = "";

  constructor(data?: PartialMessage<MsgAddToClassWhitelist>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.MsgAddToClassWhitelist";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAddToClassWhitelist {
    return new MsgAddToClassWhitelist().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAddToClassWhitelist {
    return new MsgAddToClassWhitelist().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAddToClassWhitelist {
    return new MsgAddToClassWhitelist().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAddToClassWhitelist | PlainMessage<MsgAddToClassWhitelist> | undefined, b: MsgAddToClassWhitelist | PlainMessage<MsgAddToClassWhitelist> | undefined): boolean {
    return proto3.util.equals(MsgAddToClassWhitelist, a, b);
  }
}

/**
 * @generated from message coreum.asset.nft.v1.MsgRemoveFromClassWhitelist
 */
export class MsgRemoveFromClassWhitelist extends Message<MsgRemoveFromClassWhitelist> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string class_id = 2;
   */
  classId = "";

  /**
   * @generated from field: string account = 3;
   */
  account = "";

  constructor(data?: PartialMessage<MsgRemoveFromClassWhitelist>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.MsgRemoveFromClassWhitelist";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRemoveFromClassWhitelist {
    return new MsgRemoveFromClassWhitelist().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRemoveFromClassWhitelist {
    return new MsgRemoveFromClassWhitelist().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRemoveFromClassWhitelist {
    return new MsgRemoveFromClassWhitelist().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRemoveFromClassWhitelist | PlainMessage<MsgRemoveFromClassWhitelist> | undefined, b: MsgRemoveFromClassWhitelist | PlainMessage<MsgRemoveFromClassWhitelist> | undefined): boolean {
    return proto3.util.equals(MsgRemoveFromClassWhitelist, a, b);
  }
}

/**
 * @generated from message coreum.asset.nft.v1.MsgUpdateParams
 */
export class MsgUpdateParams extends Message<MsgUpdateParams> {
  /**
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * @generated from field: coreum.asset.nft.v1.Params params = 2;
   */
  params?: Params;

  constructor(data?: PartialMessage<MsgUpdateParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.MsgUpdateParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined, b: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParams, a, b);
  }
}

/**
 * @generated from message coreum.asset.nft.v1.EmptyResponse
 */
export class EmptyResponse extends Message<EmptyResponse> {
  constructor(data?: PartialMessage<EmptyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.EmptyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EmptyResponse {
    return new EmptyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EmptyResponse {
    return new EmptyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EmptyResponse {
    return new EmptyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: EmptyResponse | PlainMessage<EmptyResponse> | undefined, b: EmptyResponse | PlainMessage<EmptyResponse> | undefined): boolean {
    return proto3.util.equals(EmptyResponse, a, b);
  }
}

