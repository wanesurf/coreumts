// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file coreum/asset/ft/v1/authz.proto (package coreum.asset.ft.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Coin } from "../../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * MintAuthorization allows the grantee to mint up to mint_limit coin from
 * the granter's account.
 *
 * @generated from message coreum.asset.ft.v1.MintAuthorization
 */
export class MintAuthorization extends Message<MintAuthorization> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin mint_limit = 1;
   */
  mintLimit: Coin[] = [];

  constructor(data?: PartialMessage<MintAuthorization>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.ft.v1.MintAuthorization";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "mint_limit", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MintAuthorization {
    return new MintAuthorization().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MintAuthorization {
    return new MintAuthorization().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MintAuthorization {
    return new MintAuthorization().fromJsonString(jsonString, options);
  }

  static equals(a: MintAuthorization | PlainMessage<MintAuthorization> | undefined, b: MintAuthorization | PlainMessage<MintAuthorization> | undefined): boolean {
    return proto3.util.equals(MintAuthorization, a, b);
  }
}

/**
 * BurnAuthorization allows the grantee to burn up to burn_limit coin from
 * the granter's account.
 *
 * @generated from message coreum.asset.ft.v1.BurnAuthorization
 */
export class BurnAuthorization extends Message<BurnAuthorization> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin burn_limit = 1;
   */
  burnLimit: Coin[] = [];

  constructor(data?: PartialMessage<BurnAuthorization>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.ft.v1.BurnAuthorization";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "burn_limit", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BurnAuthorization {
    return new BurnAuthorization().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BurnAuthorization {
    return new BurnAuthorization().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BurnAuthorization {
    return new BurnAuthorization().fromJsonString(jsonString, options);
  }

  static equals(a: BurnAuthorization | PlainMessage<BurnAuthorization> | undefined, b: BurnAuthorization | PlainMessage<BurnAuthorization> | undefined): boolean {
    return proto3.util.equals(BurnAuthorization, a, b);
  }
}

