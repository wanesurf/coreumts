// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file coreum/asset/ft/v1/params.proto (package coreum.asset.ft.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { Coin } from "../../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * Params store gov manageable parameters.
 *
 * @generated from message coreum.asset.ft.v1.Params
 */
export class Params extends Message<Params> {
  /**
   * issue_fee is the fee burnt each time new token is issued.
   *
   * @generated from field: cosmos.base.v1beta1.Coin issue_fee = 1;
   */
  issueFee?: Coin;

  /**
   * token_upgrade_decision_timeout defines the end of the decision period for upgrading the token.
   *
   * @generated from field: google.protobuf.Timestamp token_upgrade_decision_timeout = 2;
   */
  tokenUpgradeDecisionTimeout?: Timestamp;

  /**
   * token_upgrade_grace_period the period after which the token upgrade is executed effectively.
   *
   * @generated from field: google.protobuf.Duration token_upgrade_grace_period = 3;
   */
  tokenUpgradeGracePeriod?: Duration;

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.ft.v1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "issue_fee", kind: "message", T: Coin },
    { no: 2, name: "token_upgrade_decision_timeout", kind: "message", T: Timestamp },
    { no: 3, name: "token_upgrade_grace_period", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

