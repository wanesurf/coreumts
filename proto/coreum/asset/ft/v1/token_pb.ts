// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file coreum/asset/ft/v1/token.proto (package coreum.asset.ft.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * Feature defines possible features of fungible token.
 *
 * @generated from enum coreum.asset.ft.v1.Feature
 */
export enum Feature {
  /**
   * @generated from enum value: minting = 0;
   */
  minting = 0,

  /**
   * @generated from enum value: burning = 1;
   */
  burning = 1,

  /**
   * @generated from enum value: freezing = 2;
   */
  freezing = 2,

  /**
   * @generated from enum value: whitelisting = 3;
   */
  whitelisting = 3,

  /**
   * @generated from enum value: ibc = 4;
   */
  ibc = 4,

  /**
   * @generated from enum value: block_smart_contracts = 5;
   */
  block_smart_contracts = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(Feature)
proto3.util.setEnumType(Feature, "coreum.asset.ft.v1.Feature", [
  { no: 0, name: "minting" },
  { no: 1, name: "burning" },
  { no: 2, name: "freezing" },
  { no: 3, name: "whitelisting" },
  { no: 4, name: "ibc" },
  { no: 5, name: "block_smart_contracts" },
]);

/**
 * Definition defines the fungible token settings to store.
 *
 * @generated from message coreum.asset.ft.v1.Definition
 */
export class Definition extends Message<Definition> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: string issuer = 2;
   */
  issuer = "";

  /**
   * @generated from field: repeated coreum.asset.ft.v1.Feature features = 3;
   */
  features: Feature[] = [];

  /**
   * burn_rate is a number between 0 and 1 which will be multiplied by send amount to determine
   * burn_amount. This value will be burnt on top of the send amount.
   *
   * @generated from field: string burn_rate = 4;
   */
  burnRate = "";

  /**
   * send_commission_rate is a number between 0 and 1 which will be multiplied by send amount to determine
   * amount sent to the token issuer account.
   *
   * @generated from field: string send_commission_rate = 5;
   */
  sendCommissionRate = "";

  /**
   * @generated from field: uint32 version = 6;
   */
  version = 0;

  /**
   * @generated from field: string uri = 7;
   */
  uri = "";

  /**
   * @generated from field: string uri_hash = 8;
   */
  uriHash = "";

  constructor(data?: PartialMessage<Definition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.ft.v1.Definition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "issuer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "features", kind: "enum", T: proto3.getEnumType(Feature), repeated: true },
    { no: 4, name: "burn_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "send_commission_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "version", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 7, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "uri_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Definition {
    return new Definition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Definition {
    return new Definition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Definition {
    return new Definition().fromJsonString(jsonString, options);
  }

  static equals(a: Definition | PlainMessage<Definition> | undefined, b: Definition | PlainMessage<Definition> | undefined): boolean {
    return proto3.util.equals(Definition, a, b);
  }
}

/**
 * Token is a full representation of the fungible token.
 *
 * @generated from message coreum.asset.ft.v1.Token
 */
export class Token extends Message<Token> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: string issuer = 2;
   */
  issuer = "";

  /**
   * @generated from field: string symbol = 3;
   */
  symbol = "";

  /**
   * @generated from field: string subunit = 4;
   */
  subunit = "";

  /**
   * @generated from field: uint32 precision = 5;
   */
  precision = 0;

  /**
   * @generated from field: string description = 6;
   */
  description = "";

  /**
   * @generated from field: bool globally_frozen = 7;
   */
  globallyFrozen = false;

  /**
   * @generated from field: repeated coreum.asset.ft.v1.Feature features = 8;
   */
  features: Feature[] = [];

  /**
   * burn_rate is a number between 0 and 1 which will be multiplied by send amount to determine
   * burn_amount. This value will be burnt on top of the send amount.
   *
   * @generated from field: string burn_rate = 9;
   */
  burnRate = "";

  /**
   * send_commission_rate is a number between 0 and 1 which will be multiplied by send amount to determine
   * amount sent to the token issuer account.
   *
   * @generated from field: string send_commission_rate = 10;
   */
  sendCommissionRate = "";

  /**
   * @generated from field: uint32 version = 11;
   */
  version = 0;

  /**
   * @generated from field: string uri = 12;
   */
  uri = "";

  /**
   * @generated from field: string uri_hash = 13;
   */
  uriHash = "";

  constructor(data?: PartialMessage<Token>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.ft.v1.Token";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "issuer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "subunit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "precision", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "globally_frozen", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "features", kind: "enum", T: proto3.getEnumType(Feature), repeated: true },
    { no: 9, name: "burn_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "send_commission_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "version", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 12, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "uri_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Token {
    return new Token().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Token {
    return new Token().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Token {
    return new Token().fromJsonString(jsonString, options);
  }

  static equals(a: Token | PlainMessage<Token> | undefined, b: Token | PlainMessage<Token> | undefined): boolean {
    return proto3.util.equals(Token, a, b);
  }
}

/**
 * DelayedTokenUpgradeV1 is executed by the delay module when it's time to enable IBC.
 *
 * @generated from message coreum.asset.ft.v1.DelayedTokenUpgradeV1
 */
export class DelayedTokenUpgradeV1 extends Message<DelayedTokenUpgradeV1> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  constructor(data?: PartialMessage<DelayedTokenUpgradeV1>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.ft.v1.DelayedTokenUpgradeV1";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DelayedTokenUpgradeV1 {
    return new DelayedTokenUpgradeV1().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DelayedTokenUpgradeV1 {
    return new DelayedTokenUpgradeV1().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DelayedTokenUpgradeV1 {
    return new DelayedTokenUpgradeV1().fromJsonString(jsonString, options);
  }

  static equals(a: DelayedTokenUpgradeV1 | PlainMessage<DelayedTokenUpgradeV1> | undefined, b: DelayedTokenUpgradeV1 | PlainMessage<DelayedTokenUpgradeV1> | undefined): boolean {
    return proto3.util.equals(DelayedTokenUpgradeV1, a, b);
  }
}

/**
 * TokenUpgradeV1Status defines the current status of the v1 token migration.
 *
 * @generated from message coreum.asset.ft.v1.TokenUpgradeV1Status
 */
export class TokenUpgradeV1Status extends Message<TokenUpgradeV1Status> {
  /**
   * @generated from field: bool ibc_enabled = 1;
   */
  ibcEnabled = false;

  /**
   * @generated from field: google.protobuf.Timestamp start_time = 2;
   */
  startTime?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp end_time = 3;
   */
  endTime?: Timestamp;

  constructor(data?: PartialMessage<TokenUpgradeV1Status>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.ft.v1.TokenUpgradeV1Status";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ibc_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "start_time", kind: "message", T: Timestamp },
    { no: 3, name: "end_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TokenUpgradeV1Status {
    return new TokenUpgradeV1Status().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TokenUpgradeV1Status {
    return new TokenUpgradeV1Status().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TokenUpgradeV1Status {
    return new TokenUpgradeV1Status().fromJsonString(jsonString, options);
  }

  static equals(a: TokenUpgradeV1Status | PlainMessage<TokenUpgradeV1Status> | undefined, b: TokenUpgradeV1Status | PlainMessage<TokenUpgradeV1Status> | undefined): boolean {
    return proto3.util.equals(TokenUpgradeV1Status, a, b);
  }
}

/**
 * TokenUpgradeStatuses defines all statuses of the token migrations.
 *
 * @generated from message coreum.asset.ft.v1.TokenUpgradeStatuses
 */
export class TokenUpgradeStatuses extends Message<TokenUpgradeStatuses> {
  /**
   * @generated from field: coreum.asset.ft.v1.TokenUpgradeV1Status v1 = 1;
   */
  v1?: TokenUpgradeV1Status;

  constructor(data?: PartialMessage<TokenUpgradeStatuses>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.ft.v1.TokenUpgradeStatuses";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "v1", kind: "message", T: TokenUpgradeV1Status },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TokenUpgradeStatuses {
    return new TokenUpgradeStatuses().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TokenUpgradeStatuses {
    return new TokenUpgradeStatuses().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TokenUpgradeStatuses {
    return new TokenUpgradeStatuses().fromJsonString(jsonString, options);
  }

  static equals(a: TokenUpgradeStatuses | PlainMessage<TokenUpgradeStatuses> | undefined, b: TokenUpgradeStatuses | PlainMessage<TokenUpgradeStatuses> | undefined): boolean {
    return proto3.util.equals(TokenUpgradeStatuses, a, b);
  }
}

