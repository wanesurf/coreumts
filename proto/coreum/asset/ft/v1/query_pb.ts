// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file coreum/asset/ft/v1/query.proto (package coreum.asset.ft.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { Token, TokenUpgradeStatuses } from "./token_pb.js";
import { PageRequest, PageResponse } from "../../../../cosmos/base/query/v1beta1/pagination_pb.js";
import { Coin } from "../../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * QueryParamsRequest defines the request type for querying x/asset/ft parameters.
 *
 * @generated from message coreum.asset.ft.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.ft.v1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse defines the response type for querying x/asset/ft parameters.
 *
 * @generated from message coreum.asset.ft.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * @generated from field: coreum.asset.ft.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.ft.v1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * @generated from message coreum.asset.ft.v1.QueryTokenRequest
 */
export class QueryTokenRequest extends Message<QueryTokenRequest> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  constructor(data?: PartialMessage<QueryTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.ft.v1.QueryTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTokenRequest {
    return new QueryTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTokenRequest {
    return new QueryTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTokenRequest {
    return new QueryTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTokenRequest | PlainMessage<QueryTokenRequest> | undefined, b: QueryTokenRequest | PlainMessage<QueryTokenRequest> | undefined): boolean {
    return proto3.util.equals(QueryTokenRequest, a, b);
  }
}

/**
 * @generated from message coreum.asset.ft.v1.QueryTokenResponse
 */
export class QueryTokenResponse extends Message<QueryTokenResponse> {
  /**
   * @generated from field: coreum.asset.ft.v1.Token token = 1;
   */
  token?: Token;

  constructor(data?: PartialMessage<QueryTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.ft.v1.QueryTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "message", T: Token },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTokenResponse {
    return new QueryTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTokenResponse {
    return new QueryTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTokenResponse {
    return new QueryTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTokenResponse | PlainMessage<QueryTokenResponse> | undefined, b: QueryTokenResponse | PlainMessage<QueryTokenResponse> | undefined): boolean {
    return proto3.util.equals(QueryTokenResponse, a, b);
  }
}

/**
 * @generated from message coreum.asset.ft.v1.QueryTokenUpgradeStatusesRequest
 */
export class QueryTokenUpgradeStatusesRequest extends Message<QueryTokenUpgradeStatusesRequest> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  constructor(data?: PartialMessage<QueryTokenUpgradeStatusesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.ft.v1.QueryTokenUpgradeStatusesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTokenUpgradeStatusesRequest {
    return new QueryTokenUpgradeStatusesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTokenUpgradeStatusesRequest {
    return new QueryTokenUpgradeStatusesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTokenUpgradeStatusesRequest {
    return new QueryTokenUpgradeStatusesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTokenUpgradeStatusesRequest | PlainMessage<QueryTokenUpgradeStatusesRequest> | undefined, b: QueryTokenUpgradeStatusesRequest | PlainMessage<QueryTokenUpgradeStatusesRequest> | undefined): boolean {
    return proto3.util.equals(QueryTokenUpgradeStatusesRequest, a, b);
  }
}

/**
 * @generated from message coreum.asset.ft.v1.QueryTokenUpgradeStatusesResponse
 */
export class QueryTokenUpgradeStatusesResponse extends Message<QueryTokenUpgradeStatusesResponse> {
  /**
   * @generated from field: coreum.asset.ft.v1.TokenUpgradeStatuses statuses = 1;
   */
  statuses?: TokenUpgradeStatuses;

  constructor(data?: PartialMessage<QueryTokenUpgradeStatusesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.ft.v1.QueryTokenUpgradeStatusesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "statuses", kind: "message", T: TokenUpgradeStatuses },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTokenUpgradeStatusesResponse {
    return new QueryTokenUpgradeStatusesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTokenUpgradeStatusesResponse {
    return new QueryTokenUpgradeStatusesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTokenUpgradeStatusesResponse {
    return new QueryTokenUpgradeStatusesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTokenUpgradeStatusesResponse | PlainMessage<QueryTokenUpgradeStatusesResponse> | undefined, b: QueryTokenUpgradeStatusesResponse | PlainMessage<QueryTokenUpgradeStatusesResponse> | undefined): boolean {
    return proto3.util.equals(QueryTokenUpgradeStatusesResponse, a, b);
  }
}

/**
 * @generated from message coreum.asset.ft.v1.QueryTokensRequest
 */
export class QueryTokensRequest extends Message<QueryTokensRequest> {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  /**
   * @generated from field: string issuer = 2;
   */
  issuer = "";

  constructor(data?: PartialMessage<QueryTokensRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.ft.v1.QueryTokensRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
    { no: 2, name: "issuer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTokensRequest {
    return new QueryTokensRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTokensRequest {
    return new QueryTokensRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTokensRequest {
    return new QueryTokensRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTokensRequest | PlainMessage<QueryTokensRequest> | undefined, b: QueryTokensRequest | PlainMessage<QueryTokensRequest> | undefined): boolean {
    return proto3.util.equals(QueryTokensRequest, a, b);
  }
}

/**
 * @generated from message coreum.asset.ft.v1.QueryTokensResponse
 */
export class QueryTokensResponse extends Message<QueryTokensResponse> {
  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 1;
   */
  pagination?: PageResponse;

  /**
   * @generated from field: repeated coreum.asset.ft.v1.Token tokens = 2;
   */
  tokens: Token[] = [];

  constructor(data?: PartialMessage<QueryTokensResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.ft.v1.QueryTokensResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageResponse },
    { no: 2, name: "tokens", kind: "message", T: Token, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTokensResponse {
    return new QueryTokensResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTokensResponse {
    return new QueryTokensResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTokensResponse {
    return new QueryTokensResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTokensResponse | PlainMessage<QueryTokensResponse> | undefined, b: QueryTokensResponse | PlainMessage<QueryTokensResponse> | undefined): boolean {
    return proto3.util.equals(QueryTokensResponse, a, b);
  }
}

/**
 * @generated from message coreum.asset.ft.v1.QueryBalanceRequest
 */
export class QueryBalanceRequest extends Message<QueryBalanceRequest> {
  /**
   * account specifies the account onto which we query balances
   *
   * @generated from field: string account = 1;
   */
  account = "";

  /**
   * denom specifies balances on a specific denom
   *
   * @generated from field: string denom = 2;
   */
  denom = "";

  constructor(data?: PartialMessage<QueryBalanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.ft.v1.QueryBalanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBalanceRequest {
    return new QueryBalanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBalanceRequest {
    return new QueryBalanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBalanceRequest {
    return new QueryBalanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBalanceRequest | PlainMessage<QueryBalanceRequest> | undefined, b: QueryBalanceRequest | PlainMessage<QueryBalanceRequest> | undefined): boolean {
    return proto3.util.equals(QueryBalanceRequest, a, b);
  }
}

/**
 * @generated from message coreum.asset.ft.v1.QueryBalanceResponse
 */
export class QueryBalanceResponse extends Message<QueryBalanceResponse> {
  /**
   * balance contains the balance with the queried account and denom
   *
   * @generated from field: string balance = 1;
   */
  balance = "";

  /**
   * whitelisted is the whitelisted amount of the denom on the account.
   *
   * @generated from field: string whitelisted = 2;
   */
  whitelisted = "";

  /**
   * frozen is the frozen amount of the denom on the account.
   *
   * @generated from field: string frozen = 3;
   */
  frozen = "";

  /**
   * locked is the balance locked by vesting.
   *
   * @generated from field: string locked = 4;
   */
  locked = "";

  constructor(data?: PartialMessage<QueryBalanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.ft.v1.QueryBalanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "balance", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "whitelisted", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "frozen", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "locked", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBalanceResponse {
    return new QueryBalanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBalanceResponse {
    return new QueryBalanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBalanceResponse {
    return new QueryBalanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBalanceResponse | PlainMessage<QueryBalanceResponse> | undefined, b: QueryBalanceResponse | PlainMessage<QueryBalanceResponse> | undefined): boolean {
    return proto3.util.equals(QueryBalanceResponse, a, b);
  }
}

/**
 * @generated from message coreum.asset.ft.v1.QueryFrozenBalancesRequest
 */
export class QueryFrozenBalancesRequest extends Message<QueryFrozenBalancesRequest> {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  /**
   * account specifies the account onto which we query frozen balances
   *
   * @generated from field: string account = 2;
   */
  account = "";

  constructor(data?: PartialMessage<QueryFrozenBalancesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.ft.v1.QueryFrozenBalancesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
    { no: 2, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFrozenBalancesRequest {
    return new QueryFrozenBalancesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFrozenBalancesRequest {
    return new QueryFrozenBalancesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFrozenBalancesRequest {
    return new QueryFrozenBalancesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFrozenBalancesRequest | PlainMessage<QueryFrozenBalancesRequest> | undefined, b: QueryFrozenBalancesRequest | PlainMessage<QueryFrozenBalancesRequest> | undefined): boolean {
    return proto3.util.equals(QueryFrozenBalancesRequest, a, b);
  }
}

/**
 * @generated from message coreum.asset.ft.v1.QueryFrozenBalancesResponse
 */
export class QueryFrozenBalancesResponse extends Message<QueryFrozenBalancesResponse> {
  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 1;
   */
  pagination?: PageResponse;

  /**
   * balances contains the frozen balances on the queried account
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin balances = 2;
   */
  balances: Coin[] = [];

  constructor(data?: PartialMessage<QueryFrozenBalancesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.ft.v1.QueryFrozenBalancesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageResponse },
    { no: 2, name: "balances", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFrozenBalancesResponse {
    return new QueryFrozenBalancesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFrozenBalancesResponse {
    return new QueryFrozenBalancesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFrozenBalancesResponse {
    return new QueryFrozenBalancesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFrozenBalancesResponse | PlainMessage<QueryFrozenBalancesResponse> | undefined, b: QueryFrozenBalancesResponse | PlainMessage<QueryFrozenBalancesResponse> | undefined): boolean {
    return proto3.util.equals(QueryFrozenBalancesResponse, a, b);
  }
}

/**
 * @generated from message coreum.asset.ft.v1.QueryFrozenBalanceRequest
 */
export class QueryFrozenBalanceRequest extends Message<QueryFrozenBalanceRequest> {
  /**
   * account specifies the account onto which we query frozen balances
   *
   * @generated from field: string account = 1;
   */
  account = "";

  /**
   * denom specifies frozen balances on a specific denom
   *
   * @generated from field: string denom = 2;
   */
  denom = "";

  constructor(data?: PartialMessage<QueryFrozenBalanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.ft.v1.QueryFrozenBalanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFrozenBalanceRequest {
    return new QueryFrozenBalanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFrozenBalanceRequest {
    return new QueryFrozenBalanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFrozenBalanceRequest {
    return new QueryFrozenBalanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFrozenBalanceRequest | PlainMessage<QueryFrozenBalanceRequest> | undefined, b: QueryFrozenBalanceRequest | PlainMessage<QueryFrozenBalanceRequest> | undefined): boolean {
    return proto3.util.equals(QueryFrozenBalanceRequest, a, b);
  }
}

/**
 * @generated from message coreum.asset.ft.v1.QueryFrozenBalanceResponse
 */
export class QueryFrozenBalanceResponse extends Message<QueryFrozenBalanceResponse> {
  /**
   * balance contains the frozen balance with the queried account and denom
   *
   * @generated from field: cosmos.base.v1beta1.Coin balance = 1;
   */
  balance?: Coin;

  constructor(data?: PartialMessage<QueryFrozenBalanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.ft.v1.QueryFrozenBalanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "balance", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFrozenBalanceResponse {
    return new QueryFrozenBalanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFrozenBalanceResponse {
    return new QueryFrozenBalanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFrozenBalanceResponse {
    return new QueryFrozenBalanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFrozenBalanceResponse | PlainMessage<QueryFrozenBalanceResponse> | undefined, b: QueryFrozenBalanceResponse | PlainMessage<QueryFrozenBalanceResponse> | undefined): boolean {
    return proto3.util.equals(QueryFrozenBalanceResponse, a, b);
  }
}

/**
 * @generated from message coreum.asset.ft.v1.QueryWhitelistedBalancesRequest
 */
export class QueryWhitelistedBalancesRequest extends Message<QueryWhitelistedBalancesRequest> {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  /**
   * account specifies the account onto which we query whitelisted balances
   *
   * @generated from field: string account = 2;
   */
  account = "";

  constructor(data?: PartialMessage<QueryWhitelistedBalancesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.ft.v1.QueryWhitelistedBalancesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
    { no: 2, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryWhitelistedBalancesRequest {
    return new QueryWhitelistedBalancesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryWhitelistedBalancesRequest {
    return new QueryWhitelistedBalancesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryWhitelistedBalancesRequest {
    return new QueryWhitelistedBalancesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryWhitelistedBalancesRequest | PlainMessage<QueryWhitelistedBalancesRequest> | undefined, b: QueryWhitelistedBalancesRequest | PlainMessage<QueryWhitelistedBalancesRequest> | undefined): boolean {
    return proto3.util.equals(QueryWhitelistedBalancesRequest, a, b);
  }
}

/**
 * @generated from message coreum.asset.ft.v1.QueryWhitelistedBalancesResponse
 */
export class QueryWhitelistedBalancesResponse extends Message<QueryWhitelistedBalancesResponse> {
  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 1;
   */
  pagination?: PageResponse;

  /**
   * balances contains the whitelisted balances on the queried account
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin balances = 2;
   */
  balances: Coin[] = [];

  constructor(data?: PartialMessage<QueryWhitelistedBalancesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.ft.v1.QueryWhitelistedBalancesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageResponse },
    { no: 2, name: "balances", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryWhitelistedBalancesResponse {
    return new QueryWhitelistedBalancesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryWhitelistedBalancesResponse {
    return new QueryWhitelistedBalancesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryWhitelistedBalancesResponse {
    return new QueryWhitelistedBalancesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryWhitelistedBalancesResponse | PlainMessage<QueryWhitelistedBalancesResponse> | undefined, b: QueryWhitelistedBalancesResponse | PlainMessage<QueryWhitelistedBalancesResponse> | undefined): boolean {
    return proto3.util.equals(QueryWhitelistedBalancesResponse, a, b);
  }
}

/**
 * @generated from message coreum.asset.ft.v1.QueryWhitelistedBalanceRequest
 */
export class QueryWhitelistedBalanceRequest extends Message<QueryWhitelistedBalanceRequest> {
  /**
   * account specifies the account onto which we query whitelisted balances
   *
   * @generated from field: string account = 1;
   */
  account = "";

  /**
   * denom specifies whitelisted balances on a specific denom
   *
   * @generated from field: string denom = 2;
   */
  denom = "";

  constructor(data?: PartialMessage<QueryWhitelistedBalanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.ft.v1.QueryWhitelistedBalanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryWhitelistedBalanceRequest {
    return new QueryWhitelistedBalanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryWhitelistedBalanceRequest {
    return new QueryWhitelistedBalanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryWhitelistedBalanceRequest {
    return new QueryWhitelistedBalanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryWhitelistedBalanceRequest | PlainMessage<QueryWhitelistedBalanceRequest> | undefined, b: QueryWhitelistedBalanceRequest | PlainMessage<QueryWhitelistedBalanceRequest> | undefined): boolean {
    return proto3.util.equals(QueryWhitelistedBalanceRequest, a, b);
  }
}

/**
 * @generated from message coreum.asset.ft.v1.QueryWhitelistedBalanceResponse
 */
export class QueryWhitelistedBalanceResponse extends Message<QueryWhitelistedBalanceResponse> {
  /**
   * balance contains the whitelisted balance with the queried account and denom
   *
   * @generated from field: cosmos.base.v1beta1.Coin balance = 1;
   */
  balance?: Coin;

  constructor(data?: PartialMessage<QueryWhitelistedBalanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.ft.v1.QueryWhitelistedBalanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "balance", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryWhitelistedBalanceResponse {
    return new QueryWhitelistedBalanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryWhitelistedBalanceResponse {
    return new QueryWhitelistedBalanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryWhitelistedBalanceResponse {
    return new QueryWhitelistedBalanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryWhitelistedBalanceResponse | PlainMessage<QueryWhitelistedBalanceResponse> | undefined, b: QueryWhitelistedBalanceResponse | PlainMessage<QueryWhitelistedBalanceResponse> | undefined): boolean {
    return proto3.util.equals(QueryWhitelistedBalanceResponse, a, b);
  }
}

