// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file coreum/asset/ft/v1/genesis.proto (package coreum.asset.ft.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { Token } from "./token_pb.js";
import { Coin } from "../../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * GenesisState defines the module genesis state.
 *
 * @generated from message coreum.asset.ft.v1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * params defines all the parameters of the module.
   *
   * @generated from field: coreum.asset.ft.v1.Params params = 1;
   */
  params?: Params;

  /**
   * tokens keep the fungible token state
   *
   * @generated from field: repeated coreum.asset.ft.v1.Token tokens = 2;
   */
  tokens: Token[] = [];

  /**
   * frozen_balances contains the frozen balances on all of the accounts
   *
   * @generated from field: repeated coreum.asset.ft.v1.Balance frozen_balances = 3;
   */
  frozenBalances: Balance[] = [];

  /**
   * whitelisted_balances contains the whitelisted balances on all of the accounts
   *
   * @generated from field: repeated coreum.asset.ft.v1.Balance whitelisted_balances = 4;
   */
  whitelistedBalances: Balance[] = [];

  /**
   * pending_token_upgrades contains pending token upgrades.
   *
   * @generated from field: repeated coreum.asset.ft.v1.PendingTokenUpgrade pending_token_upgrades = 5;
   */
  pendingTokenUpgrades: PendingTokenUpgrade[] = [];

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.ft.v1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
    { no: 2, name: "tokens", kind: "message", T: Token, repeated: true },
    { no: 3, name: "frozen_balances", kind: "message", T: Balance, repeated: true },
    { no: 4, name: "whitelisted_balances", kind: "message", T: Balance, repeated: true },
    { no: 5, name: "pending_token_upgrades", kind: "message", T: PendingTokenUpgrade, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

/**
 * Balance defines an account address and balance pair used module genesis genesis state.
 *
 * @generated from message coreum.asset.ft.v1.Balance
 */
export class Balance extends Message<Balance> {
  /**
   * address is the address of the balance holder.
   *
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * coins defines the different coins this balance holds.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin coins = 2;
   */
  coins: Coin[] = [];

  constructor(data?: PartialMessage<Balance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.ft.v1.Balance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "coins", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Balance {
    return new Balance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Balance {
    return new Balance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Balance {
    return new Balance().fromJsonString(jsonString, options);
  }

  static equals(a: Balance | PlainMessage<Balance> | undefined, b: Balance | PlainMessage<Balance> | undefined): boolean {
    return proto3.util.equals(Balance, a, b);
  }
}

/**
 * PendingTokenUpgrade stores the version of pending token upgrade.
 *
 * @generated from message coreum.asset.ft.v1.PendingTokenUpgrade
 */
export class PendingTokenUpgrade extends Message<PendingTokenUpgrade> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: uint32 version = 2;
   */
  version = 0;

  constructor(data?: PartialMessage<PendingTokenUpgrade>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.ft.v1.PendingTokenUpgrade";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PendingTokenUpgrade {
    return new PendingTokenUpgrade().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PendingTokenUpgrade {
    return new PendingTokenUpgrade().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PendingTokenUpgrade {
    return new PendingTokenUpgrade().fromJsonString(jsonString, options);
  }

  static equals(a: PendingTokenUpgrade | PlainMessage<PendingTokenUpgrade> | undefined, b: PendingTokenUpgrade | PlainMessage<PendingTokenUpgrade> | undefined): boolean {
    return proto3.util.equals(PendingTokenUpgrade, a, b);
  }
}

