// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file cosmos/nft/v1beta1/genesis.proto (package cosmos.nft.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Class, NFT } from "./nft_pb.js";

/**
 * GenesisState defines the nft module's genesis state.
 *
 * @generated from message cosmos.nft.v1beta1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * class defines the class of the nft type.
   *
   * @generated from field: repeated cosmos.nft.v1beta1.Class classes = 1;
   */
  classes: Class[] = [];

  /**
   * entry defines all nft owned by a person.
   *
   * @generated from field: repeated cosmos.nft.v1beta1.Entry entries = 2;
   */
  entries: Entry[] = [];

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.nft.v1beta1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "classes", kind: "message", T: Class, repeated: true },
    { no: 2, name: "entries", kind: "message", T: Entry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

/**
 * Entry Defines all nft owned by a person
 *
 * @generated from message cosmos.nft.v1beta1.Entry
 */
export class Entry extends Message<Entry> {
  /**
   * owner is the owner address of the following nft
   *
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * nfts is a group of nfts of the same owner
   *
   * @generated from field: repeated cosmos.nft.v1beta1.NFT nfts = 2;
   */
  nfts: NFT[] = [];

  constructor(data?: PartialMessage<Entry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.nft.v1beta1.Entry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "nfts", kind: "message", T: NFT, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Entry {
    return new Entry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Entry {
    return new Entry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Entry {
    return new Entry().fromJsonString(jsonString, options);
  }

  static equals(a: Entry | PlainMessage<Entry> | undefined, b: Entry | PlainMessage<Entry> | undefined): boolean {
    return proto3.util.equals(Entry, a, b);
  }
}

